#!/usr/bin/env python3
#(works in python 2 too)

# TODO: move into Arlib proper
# TODO: move resources.{h,cpp} into obj/, beside glsym-slim.h
# TODO: make 'resources' a global variable

import os

header = '/* Autogenerated, do not edit. All changes will be undone. */\n'
body = header

header += '#include <stdint.h>\n#include "arlib/image.h"\nstruct resources {\nresources();\n'
body += '#include "resources.h"\n'
constructor = "resources::resources()\n{\n"

for fn in sorted(os.listdir("resources/")):
	if fn.startswith("x-"): continue
	with open("resources/"+fn, "rb") as f:
		sfn,ext = fn.split(".",1)  # split on first period, not last, so 'monospace.font.png' becomes item 'monospace' of extension 'font.png'
		
		b = bytearray(f.read())  # pointless bytearray conversion because in python2, bytes is str and indexing that is str, not int
		header += "static const uint8_t "+sfn+"_raw["+str(len(b))+"];\n"
		
		body += "const uint8_t resources::"+sfn+"_raw["+str(len(b))+"] = {\n"
		body += ",".join(str(n) for n in b)
		body += "};\n"
		
		if ext == "png":
			header += "image "+sfn+";\n"
			constructor += sfn+".init_decode_png("+sfn+"_raw);\n"
		elif ext == "jpg":
			header += "image "+sfn+";\n"
			constructor += sfn+".init_decode_jpg("+sfn+"_raw);\n"
		elif ext == "font.png":
			header += "font "+sfn+";\n"
			constructor += "{ image font_tmp; font_tmp.init_decode_png("+sfn+"_raw); "+sfn+".init_from_image(font_tmp); }\n"
		else:
			print("Unknown file type "+ext)
			1/0

header += "};\n"
body += constructor + "}\n"

with open("resources.h", "wt") as f: f.write(header)
with open("resources.cpp", "wt") as f: f.write(body)
